/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v0/accountactivity/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Accounts
         * @description Returns list of accounts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: {
                                /** @description Venue identifier */
                                venue: string;
                                /** @description Account identifier */
                                account: string;
                            }[];
                            /** @description Pagination token for next page */
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trades
         * @description Returns historical trades log
         */
        get: {
            parameters: {
                query?: {
                    venue?: string;
                    account?: string;
                    start_record_timestamp_inclusive?: string;
                    end_record_timestamp_exclusive?: string;
                    page_size?: number;
                    start_record_event_id?: string;
                    start_record_correction_version?: number;
                    start_event_timestamp_inclusive?: string;
                    end_event_timestamp_exclusive?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["TradeEvent"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/transfers/deposits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Deposits
         * @description Returns historical deposits log
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["TransferEvent"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/transfers/withdrawals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Withdrawals
         * @description Returns historical withdrawals log
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["TransferEvent"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/adjustments/credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Credits
         * @description Returns historical credits log
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["AdjustmentEvent"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/adjustments/debits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Debits
         * @description Returns historical debits log
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["AdjustmentEvent"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/positions-snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Positions Snapshot
         * @description Returns last historical positions snapshot before the supplied time
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    page_size?: components["parameters"]["page_size"];
                    account_offset?: string;
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["PositionsSnapshot"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/balances-snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Balances
         * @description Returns last historical balances snapshot before the supplied time
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    page_size?: components["parameters"]["page_size"];
                    account_offset?: string;
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["BalancesSnapshot"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/calculations/v0/financing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Financing Calculations
         * @description Returns historical financing calculation details
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["FinancingCalculation"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/calculations/v0/ers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ERS Calculations
         * @description Returns historical ERS calculation details
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["ERSCalculation"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/calculations/v0/cip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get CIP Calculations
         * @description Returns historical CIP calculation details
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["CIPCalculation"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/calculations/v0/execution-premium": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Execution Premium Calculations
         * @description Returns historical execution premium calculation details
         */
        get: {
            parameters: {
                query?: {
                    venue?: components["parameters"]["venue"];
                    account?: components["parameters"]["account"];
                    start_record_timestamp_inclusive?: components["parameters"]["start_record_timestamp_inclusive"];
                    end_record_timestamp_exclusive?: components["parameters"]["end_record_timestamp_exclusive"];
                    page_size?: components["parameters"]["page_size"];
                    start_record_event_id?: components["parameters"]["start_record_event_id"];
                    start_record_correction_version?: components["parameters"]["start_record_correction_version"];
                    start_event_timestamp_inclusive?: components["parameters"]["start_event_timestamp_inclusive"];
                    end_event_timestamp_exclusive?: components["parameters"]["end_event_timestamp_exclusive"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: components["schemas"]["ExecutionPremiumCalculation"][];
                            next_page?: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/accountactivity/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description Convenience endpoint for testing API connectivity
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timestamp: string;
                            message: string;
                        };
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseEvent: {
            /** @description The time we captured the event */
            record_timestamp: string;
            /** @description The time the event occurred or measurement was taken */
            event_timestamp: string;
            /** @description An id completely unique to a single event */
            event_id: string;
            /**
             * @description Every event starts at version 0; corrections will have higher versions
             * @default 0
             */
            correction_version: number;
            /** @description The reason for the correction */
            correction_reason?: string;
            /** @description Boolean indicating the event should be deleted */
            is_deleted?: boolean;
            /** @description Venue identifier */
            venue: string;
            /** @description Account identifier */
            account: string;
            event_sub_type?: string;
        };
        TradeEvent: components["schemas"]["BaseEvent"] & {
            market: string;
            market_symbol_type: string;
            market_type: string;
            trade_id: string;
            order_id?: string;
            liquidity?: string;
            side: string;
            quantity: number;
            price: number;
            contra_party?: string;
            quote_quantity?: number;
            settlement_timestamp?: string;
            execution_venue?: string;
            multi_leg_trade_parent_id?: string;
            linked_trade_event_id?: string;
        };
        TransferEvent: components["schemas"]["BaseEvent"] & {
            id?: string;
            type: string;
            asset: string;
            asset_symbol_type: string;
            asset_type: string;
            quantity: number;
            settlement_timestamp?: string;
            contra_venue?: string;
            contra_account?: string;
            description?: string;
        };
        AdjustmentEvent: components["schemas"]["BaseEvent"] & {
            id?: string;
            type: string;
            asset: string;
            asset_symbol_type: string;
            asset_type: string;
            quantity: number;
            settlement_timestamp?: string;
        };
        PositionOrBalance: {
            instrument: string;
            instrument_symbol_type: string;
            instrument_type: string;
            quantity: number;
            unrealized_pnl_asset?: string;
            unrealized_pnl_asset_symbol_type?: string;
            unrealized_pnl?: number;
            average_entry_price?: number;
            marking_price?: number;
            settlement_timestamp?: string;
        };
        PositionsSnapshot: components["schemas"]["BaseEvent"] & {
            positions_or_balances: components["schemas"]["PositionOrBalance"][];
        };
        BalancesSnapshot: components["schemas"]["BaseEvent"] & {
            positions_or_balances: components["schemas"]["PositionOrBalance"][];
        };
        FinancingCalculation: components["schemas"]["BaseEvent"] & {
            asset_symbol: string;
            asset_symbol_type: string;
            asset_type: string;
            quantity: string;
            quantity_usd: string;
            annual_rate: number;
            hourly_rate: number;
            funding_cost_asset_symbol: string;
            funding_cost_asset_symbol_type: string;
            funding_cost_asset_type: string;
            funding_cost: number;
            settlement_timestamp?: string;
            description?: string;
        };
        ERSCalculation: components["schemas"]["BaseEvent"] & {
            asset_symbol: string;
            asset_symbol_type: string;
            asset_type: string;
            quantity: string;
            quantity_usd: string;
            annual_rate: number;
            hourly_rate: number;
            funding_cost_asset_symbol: string;
            funding_cost_asset_symbol_type: string;
            funding_cost_asset_type: string;
            funding_cost: number;
            settlement_timestamp?: string;
            description?: string;
        };
        CIPCalculation: components["schemas"]["BaseEvent"] & {
            trade_id: string;
            trade_notional: number;
            trade_notional_asset_symbol: string;
            trade_notional_asset_type: string;
            trade_notional_asset_symbol_type: string;
            trade_notional_usd: number;
            /** @default FIAT */
            cip_cost_asset_type: string;
            cip_cost_asset_symbol: string;
            cip_cost_asset_symbol_type: string;
            cip_cost: number;
            settlement_timestamp?: string;
            description?: string;
        };
        ExecutionPremiumCalculation: components["schemas"]["BaseEvent"] & {
            trade_id: string;
            trade_notional: number;
            trade_notional_asset_symbol: string;
            trade_notional_asset_type: string;
            trade_notional_asset_symbol_type: string;
            trade_notional_usd: number;
            /** @default FIAT */
            exec_premium_cost_asset_type: string;
            exec_premium_cost_asset_symbol: string;
            exec_premium_cost_asset_symbol_type: string;
            exec_premium_cost: number;
            settlement_timestamp?: string;
            description?: string;
        };
        ValidationError: {
            detail?: {
                loc: string | number;
                msg: string;
                type: string;
            }[];
        };
    };
    responses: {
        /** @description Validation Error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
    };
    parameters: {
        venue: string;
        account: string;
        start_record_timestamp_inclusive: string;
        end_record_timestamp_exclusive: string;
        page_size: number;
        start_record_event_id: string;
        start_record_correction_version: number;
        start_event_timestamp_inclusive: string;
        end_event_timestamp_exclusive: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
